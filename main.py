import argparse
import os
import importlib.util
from pathlib import Path
import config

import core.modules
import core.reports

parser = argparse.ArgumentParser(
        prog='AutoPT',
        description='Automatic Pen-testing'
        )

parser.add_argument('-c', '--config',
                    required=False,
                    type=Path
                    )
args = parser.parse_args()

config_reader = None

if args.config:
    if args.config.is_file():
        ext = args.config.suffix
        try:
            Reader = config.ConfigFactory(ext)
        except ValueError:
            print("Unknown config file type:", ext)
            exit(1)

        try:
            config_reader = Reader(args.config)
        except ValueError as e:
            print("Failed to read config:", e)
            exit(0)

        modules = config_reader.get_modules()
        for mod, mod_name in modules:
            if not mod.is_valid():
                print(f"Module {mod_name} invalid")
                exit(0)
            for name, opt in mod.options.items():
                print(name, opt.value)
        

        report = ""
        report_factory = None
        report_type = config_reader.get_option("report")
        if report_type:
            report_factory = core.reports.ReportFactoryProducor(report_type)
        # all modules are valid, run them
        for mod, mod_name in modules:
            print("Running", mod_name)
            try:
                mod.exploit()
            except Exception as e:
                print("Exception while running", mod_name + ":", e)
                exit(1)
            if report_factory:
                report += mod.write_report(report_factory)

        if report:
            print(report)
        exit(0)


selected_module = None

modules = []
for m in core.modules.find_modules():
    try:
        modules.append(core.modules.load_module(m))
    except Exception as e:
        print("Unable to load module:", m, e)

while True:
    prompt = "> "
    if selected_module:
        prompt = selected_module[1] + " " + prompt
    try:
        inp = input(prompt).strip().split()
    except KeyboardInterrupt:
        break

    match inp:
        case ["exploit"]:
            if not selected_module:
                print("Select a module with 'use'")
                break
            if selected_module[0].is_valid():
                selected_module[0].exploit()
        case ["exit"]:
            break
        case ["use"]:
            selected_module = None
        case ["use", name]:
            for module, path in modules:
                if name == path:
                    selected_module = (module(), path)
                    break
            else:
                selected_module = None
                print("Cannot find module. Use 'show modules'")
        case ["show", subject]:
            if subject == "modules":
                for module, path in modules:
                    print(module, path)
            elif subject == "options":
                if not selected_module:
                    print("select a module using 'use'")
                    continue
                selected_module[0].show_options()

        case ["report", report_type]:
            if selected_module:
                report_factory = core.reports.ReportFactoryProducor(report_type)
                if not report_factory:
                    print("Unknown report type")
                report = selected_module[0].write_report(report_factory)
                print(report)

        case ["set", key, value]:
            if selected_module is None:
                print("Select a module using 'use'")
                continue
            opt = selected_module[0].options.get(key)
            if not opt:
                print("Unknown option")
                continue
            try:
                opt.set(value)
            except ValueError:
                print("Invalid")

