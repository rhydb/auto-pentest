from abc import ABC, abstractmethod
from tabulate import tabulate
from typing import Any, Self, Union

class Report(ABC):
    text = ""

    @abstractmethod
    def bold(self, text: str) -> str:
        return ""

    @abstractmethod
    def heading(self, heading: str) -> Self:
        return self

    @abstractmethod
    def table(self, headers: list[str], table: list[list[Any]]) -> Self:
        return self

    @abstractmethod
    def paragraph(self, text: str) -> Self:
        return self

    @abstractmethod
    def list(self, items: list[str]) -> Self:
        return self

    def finish(self) -> str:
        final = self.text
        self.text = ""
        return final


def ReportFactory(report_type: str) -> Report | None:
    if report_type == "latex":
        return LatexReport()
    if report_type == "html":
        return HTMLReport()
    return None


class LatexReport(Report):
    text = '''
\\documentclass{report}
\\title{Automatic OT Pentest Report}
\\author{Automatic OT Pentest tool}
\\date{\\today}

\\begin{document}
\\maketitle
    '''

    def bold(self, text: str) -> str:
        return "\\textbf{" + text + "}"

    def table(self, headers: list[str], table: list[list[Any]]) -> Self:
        self.text += str(tabulate(table, headers=headers, tablefmt="latex"))
        return self
    
    def heading(self, heading: str) -> Self:
        self.text += "\\section{%s}\n" % heading
        return self

    def paragraph(self, text: str) -> Self:
        self.text += "\\par " + text + r'\\'
        return self

    def list(self, items: list[str]) -> Self:
        self.text += "\\begin{itemize}\n"
        self.text += ''.join('\\item ' + i + '\n' for i in items)
        self.text += '\n\\end{itemize}\n'
        return self

    def finish(self) -> str:
        self.text += "\\end{document}"
        return super().finish()


class HTMLReport(Report):
    def heading(self, heading: str) -> Self:
        self.text += "<h2>" + str(heading) + "</h2>\n"
        return self

    def bold(self, text: str) -> str:
        return "<b>" + text + "</b>"

    def table(self, headers: list[str], table: list[list[Any]]) -> Self:
        out = "<table>\n"
        out += "<thead>\n<tr>\n"
        for th in headers:
            out += "<th>" + str(th) + "</th>\n"
        out += "</tr>\n</thead>\n"
        out += "<tbody>\n"
        for tr in table:
            out += "<tr>\n"
            for td in tr:
                out += "<td>" + str(td) + "</td>\n"
            out += "</tr>\n"
        out += "</tbody>\n</table>\n"
        self.text += out
        return self

    def paragraph(self, text: str) -> Self:
        self.text += "<p>" + text + "</p>\n"
        return self

    def list(self, items: list[str]) -> Self:
        self.text += "<ul>\n"
        self.text += ''.join("<li>" + i + "</li>\n" for i in items)
        self.text += "</ul>\n"
        return self
