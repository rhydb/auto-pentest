from abc import ABC, abstractmethod
from tabulate import tabulate

class ReportFactory(ABC):
    @abstractmethod
    def create_heading(self, heading) -> str:
        return ""

    @abstractmethod
    def create_table(self, headers: list[str], table) -> str:
        return ""

def ReportFactoryProducor(report_type) -> ReportFactory:
    if report_type == "latex":
        return LatexReportFactory()
    if report_type == "html":
        return HTMLReportFactory()

class LatexReportFactory(ReportFactory):
    def create_table(self, headers, table) -> str:
        return str(tabulate(table, headers=headers, tablefmt="latex"))
    
    def create_heading(self, heading: str) -> str:
        return "\\section{%s}" % heading

class HTMLReportFactory(ReportFactory):
    def create_heading(self, heading) -> str:
        return "<h2>" + str(heading) + "</h2>"

    def create_table(self, headers: list[str], table: list) -> str:
        out = "<table>"
        out += "<thead><tr>"
        for th in headers:
            out += "<th>" + str(th) + "</th>"
        out += "</tr></thead>"
        out += "<tbody>"
        for tr in table:
            out += "<tr>"
            for td in tr:
                out += "<td>" + str(td) + "</td>"
            out += "</tr>"
        out += "</tbody></table>"
        return out
