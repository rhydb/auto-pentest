from pathlib import Path
import importlib
from tabulate import tabulate

from core.reports import Report

def find_modules(path = "modules"):
    p = Path(path)
    py_files = filter(lambda f: f.is_file(), p.rglob("*.py"))
    return py_files

def load_module(path):
    module_name = path.stem
    spec = importlib.util.spec_from_file_location(module_name, path)
    module = importlib.util.module_from_spec(spec)
    spec.loader.exec_module(module)

    # remove the first directory 'modules' and remove the suffix
    module_path = str(Path(*path.parts[1:]).with_suffix(''))
    return getattr(module, 'Module'), module_path # get the Module class


class Option:
    def __init__(self, default, required, desc, type=None):
        self.value = default
        self.required = required
        self.desc = desc
        self.type_cast = type

    def set(self, value):
        if self.type_cast is not None:
            self.value = self.type_cast(value)
        else:
            self.value = value
    
    def is_valid(self) -> bool:
        return True

class Exploit:
    desc: str = ""
    options = {}
    severity = 0

    def is_valid(self) -> bool:
        for name, opt in self.options.items():
            if not opt.is_valid():
                print(name, "is invalid")
                return False
        return True

    def exploit(self):
        return

    def write_report(self, report: Report):
        return

    def get_option(self, key: str):
        val = self.options[key]
        return val.value

    def show_options(self):
        headers = ["Name", "Current Value", "Required", "Description"]
        table = []
        for name, option in self.options.items():
            table.append([name, option.value, option.required, option.desc])

        print(tabulate(table, headers=headers))

class IPOption(Option):
    def is_valid(self) -> bool:
        if not super().is_valid():
            return False
        try:
            ipaddress.ip_address(self.value)
        except ValueError:
            return False
        return True

