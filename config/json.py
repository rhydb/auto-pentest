from . import ConfigReader
import json
from pathlib import Path
import core.modules

class JsonConfigReader(ConfigReader):
    def __init__(self, path: Path):
        super().__init__(path)

        with self.path.open(encoding="UTF-8") as f:
            self.contents = json.load(f)

    def get_modules(self):
        config_modules = self.contents.get("modules")
        if isinstance(config_modules, list):
            modules = []
            for module in config_modules:
                short_name = module.get("name")
                if not short_name:
                    continue
                # rebuild the full module path
                full_path = Path("modules", short_name + ".py")
                module_class, short_name = core.modules.load_module(full_path)
                loaded_module = module_class()

                # load the options into the module
                options = module["options"]
                for name, value in options.items():
                    try:
                        loaded_module.options[name].set(value)
                    except ValueError as e:
                        print(f"Error setting option {name} for module {short_name}:", e)
                        exit(1)

                modules.append((loaded_module, short_name))
            return modules

        else:
            print("unsupported json config")
            exit(1)

    def get_option(self, key):
        return self.contents.get(key)

    def set_option(self, key, value) -> None:
        self.contents[key] = value

    def write(self):
        with self.path.open("w", encoding="UTF-8") as f:
            json.dump(self.contents, f)
